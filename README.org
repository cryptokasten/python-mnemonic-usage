#+TITLE: Python mnemonic usage
#+PROPERTY: header-args:sh :session *shell python-mnemonic-usage sh* :results silent raw
#+PROPERTY: header-args:python :session *shell python-mnemonic-usage python* :results replace code
#+OPTIONS: ^:nil

** System environment

** Install requirements

#+BEGIN_SRC sh
pip install mnemonic
#+END_SRC

** Imports

#+BEGIN_SRC python :results silent
from mnemonic import Mnemonic
#+END_SRC

** Init

#+BEGIN_SRC python :results silent
m = Mnemonic("english")
#+END_SRC

** List languages

#+BEGIN_SRC python
Mnemonic.list_languages()
#+END_SRC

#+RESULTS:
#+begin_src python
['japanese', 'chinese_simplified', 'english', 'french', 'chinese_traditional', 'italian', 'korean', 'spanish']
#+end_src

** Generate

#+BEGIN_SRC python
words = m.generate(256)
len(words.split(" ")), words
#+END_SRC

#+RESULTS:
#+begin_src python
(24, 'device brush where mesh citizen rich local fiber air enroll stool pair advance joy connect equal crouch sadness dream sun athlete whip foam cry')
#+end_src

** To entropy

#+BEGIN_SRC python
entropy = m.to_entropy(words)
len(entropy), entropy.hex()
#+END_SRC

#+RESULTS:
#+begin_src python
(32, '3ca3a7e945e29572a0d2ad05696759cf803ef10bca603437bd0a6ca0e3f4d681')
#+end_src

** To mnemonic

#+BEGIN_SRC python
m.to_mnemonic(entropy)
#+END_SRC

#+RESULTS:
#+begin_src python
device brush where mesh citizen rich local fiber air enroll stool pair advance joy connect equal crouch sadness dream sun athlete whip foam cry
#+end_src

** Check

#+BEGIN_SRC python
m.check(words)
#+END_SRC

#+RESULTS:
#+begin_src python
True
#+end_src

** Expand

#+BEGIN_SRC python
m.expand_word("cem")
#+END_SRC

#+RESULTS:
#+begin_src python
cement
#+end_src

** To seed

With password protection.

#+BEGIN_SRC python
seed = Mnemonic.to_seed(words, "password")
len(seed), seed.hex()
#+END_SRC

#+RESULTS:
#+begin_src python
(64, 'ab401f25667c0f642ab2d438b366f11ab5c997510ca181cbcb6fa9368a84d929b6a0a92fa5a173bf6fae22538e174db06189484a185c7c745fe5b356359ff5d4')
#+end_src

Without password protection.

#+BEGIN_SRC python
seed = Mnemonic.to_seed(words, "")
len(seed), seed.hex()
#+END_SRC

#+RESULTS:
#+begin_src python
(64, 'b58a216a3e60da8132d943279359faffe52428335b433fd3afb60423f2d2f826fd1ebbecee1ee7aa5a289132cc7171c514ddd0c98ee30cfdb0b47cfa76704525')
#+end_src

** To HD master key

#+BEGIN_SRC python
Mnemonic.to_hd_master_key(seed)
#+END_SRC

#+RESULTS:
#+begin_src python
xprv9s21ZrQH143K3LC9NVkufJP9qfe9yrzPhNgeez3wxi2LsusC9qGSyPtvUPFhDuS3LCb4W6XmjPEKEcULUxy9TvJ5MhNeYB9SAx2eBzbtt5E
#+end_src

** References

- https://github.com/trezor/python-mnemonic

- https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
